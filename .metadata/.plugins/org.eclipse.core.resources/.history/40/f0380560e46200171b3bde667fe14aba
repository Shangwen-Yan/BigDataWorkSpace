package cn.tedu.storm.transactionwc;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import backtype.storm.coordination.BatchOutputCollector;
import backtype.storm.task.TopologyContext;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.topology.base.BaseBatchBolt;
import backtype.storm.transactional.TransactionAttempt;
import backtype.storm.tuple.Fields;
import backtype.storm.tuple.Tuple;
import backtype.storm.tuple.Values;

public class TransSplitSentenceBolt extends BaseBatchBolt<TransactionAttempt>{
	private BatchOutputCollector collector = null;
	private TransactionAttempt id = null;
	@Override
	public void prepare(Map conf, TopologyContext context, BatchOutputCollector collector, TransactionAttempt id) {
		this.collector = collector;
		this.id = id;
	}
	/**
	 * 将一个批中的所有的tuple 都来调用一次execute方法来进行处理
	 */
	private List<String> list = new ArrayList<>();
	@Override
	public void execute(Tuple tuple) {
		String sentence = tuple.getStringByField("sentence");
		String[] words = sentence.split(" ");
		list.addAll(Arrays.asList(words));
		
	}
	/**
	 * 当一个批中的所有的tuple都处理完成后调用这个方法，执行最后操作
	 * 一般来说如果有事务型的操作最好放在这个方法中进行原子性的处理
	 */
	@Override
	public void finishBatch() {
		for (String word: list) {
			collector.emit(new Values(id,word));
		}
	}
	
	/**
	 * 声明当前bolt发送的tuple结构
	 */
	@Override
	public void declareOutputFields(OutputFieldsDeclarer declarer) {
		declarer.declare(new Fields("txid","word"));
	}
	
}
